<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dskey - Digital Signage Player</title>
    <style>
        body {
            margin: 0;
            padding: 0;
            font-family: Arial, sans-serif;
            background-color: #1a1f3b;
            color: white;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            overflow: hidden;
        }

        /* Modo Gerador */
        #generator-mode {
            display: flex;
            flex-direction: column;
            align-items: center;
            text-align: center;
            width: 90%;
            max-width: 500px;
        }

        .key-display {
            background-color: #0a0f2b;
            border: 1px dashed #00d4ff;
            border-radius: 5px;
            padding: 15px;
            margin: 20px 0;
            font-family: monospace;
            font-size: 1.2rem;
            word-break: break-all;
        }

        .btn {
            background-color: #00d4ff;
            color: #0a0f2b;
            border: none;
            padding: 12px 20px;
            border-radius: 5px;
            font-weight: bold;
            cursor: pointer;
            margin: 5px 0;
            width: 100%;
        }

        .btn-view {
            background-color: #4CAF50;
        }

        /* Modo Player */
        #player-mode {
            display: none;
            width: 100%;
            height: 100%;
            position: relative;
        }

        #media-display {
            width: 100%;
            height: 100%;
            display: flex;
            justify-content: center;
            align-items: center;
            flex-direction: column;
        }

        .text-content {
            font-size: 24px;
            padding: 20px;
            max-width: 90%;
            word-wrap: break-word;
            text-align: center;
        }

        .media-info {
            position: fixed;
            bottom: 10px;
            right: 10px;
            font-size: 12px;
            color: #ccc;
            background: rgba(0,0,0,0.7);
            padding: 5px 10px;
            border-radius: 5px;
            display: none;
        }

        .connection-status {
            position: fixed;
            bottom: 10px;
            left: 10px;
            font-size: 12px;
            padding: 5px 10px;
            border-radius: 5px;
            display: none;
            background: rgba(0,0,0,0.7);
        }

        .online {
            color: #4CAF50;
        }

        .offline {
            color: #FF9800;
        }

        /* Tela cheia - modo limpo */
        .fullscreen-mode {
            cursor: none;
        }

        .fullscreen-mode .media-info,
        .fullscreen-mode .connection-status {
            display: none !important;
        }

        /* Botão de saída (aparece ao mover mouse) */
        .exit-button {
            position: fixed;
            top: 20px;
            right: 20px;
            background: rgba(0,0,0,0.7);
            color: white;
            border: none;
            padding: 10px 15px;
            border-radius: 5px;
            cursor: pointer;
            display: none;
            z-index: 1000;
        }
    </style>
</head>
<body>
    <!-- Modo Gerador -->
    <div id="generator-mode">
        <h2>Dskey</h2>
        <p>Sua chave única de ativação:</p>
        <div id="activation-key" class="key-display">Gerando chave...</div>
        
        <button id="view-btn" class="btn btn-view">Visualizar Conteúdo</button>
        <div class="connection-status" id="gen-status"></div>
    </div>

    <!-- Modo Player -->
    <div id="player-mode">
        <button class="exit-button" id="exit-btn">Sair (ESC)</button>
        <div id="media-display">
            <!-- Conteúdo será injetado aqui -->
        </div>
        <div class="media-info" id="media-info"></div>
        <div class="connection-status" id="player-status"></div>
    </div>

    <script src="https://www.gstatic.com/firebasejs/10.7.1/firebase-app-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/10.7.1/firebase-firestore-compat.js"></script>
    <script>
        // Configuração do Firebase
        const firebaseConfig = {
            apiKey: "AIzaSyAo12uC5EM7t4_nocYhfOdTY15men1Ping",
            authDomain: "dsigner-com-br.firebaseapp.com",
            projectId: "dsigner-com-br",
            storageBucket: "dsigner-com-br.firebasestorage.app",
            messagingSenderId: "905799758619",
            appId: "1:905799758619:web:713beeced2de2cdd7f19be"
        };

        // Inicialização
        firebase.initializeApp(firebaseConfig);
        const db = firebase.firestore();

        // Elementos
        const generatorMode = document.getElementById('generator-mode');
        const playerMode = document.getElementById('player-mode');
        const activationKeyEl = document.getElementById('activation-key');
        const viewBtn = document.getElementById('view-btn');
        const exitBtn = document.getElementById('exit-btn');
        const mediaInfo = document.getElementById('media-info');
        const playerStatus = document.getElementById('player-status');
        let currentKey = generateKey();
        let unsubscribe;
        let showInfo = false;

        // Inicialização
        activationKeyEl.textContent = currentKey;
        updateGenStatus('Pronto para uso', 'online');

        // Botão Visualizar
        viewBtn.addEventListener('click', () => {
            // Alternar entre modos
            if (playerMode.style.display === 'none') {
                generatorMode.style.display = 'none';
                playerMode.style.display = 'block';
                initPlayerMode(currentKey);
                enterFullscreen();
                viewBtn.textContent = 'Voltar ao Gerador';
            } else {
                exitFullscreen();
                playerMode.style.display = 'none';
                generatorMode.style.display = 'flex';
                viewBtn.textContent = 'Visualizar Conteúdo';
                if (unsubscribe) unsubscribe();
            }
        });

        // Função para entrar em tela cheia
        function enterFullscreen() {
            const element = document.documentElement;
            if (element.requestFullscreen) {
                element.requestFullscreen();
            } else if (element.mozRequestFullScreen) {
                element.mozRequestFullScreen();
            } else if (element.webkitRequestFullscreen) {
                element.webkitRequestFullscreen();
            } else if (element.msRequestFullscreen) {
                element.msRequestFullscreen();
            }
            
            document.body.classList.add('fullscreen-mode');
            showInfo = false;
            updateInfoVisibility();
        }

        // Função para sair da tela cheia
        function exitFullscreen() {
            if (document.exitFullscreen) {
                document.exitFullscreen();
            } else if (document.mozCancelFullScreen) {
                document.mozCancelFullScreen();
            } else if (document.webkitExitFullscreen) {
                document.webkitExitFullscreen();
            } else if (document.msExitFullscreen) {
                document.msExitFullscreen();
            }
            
            document.body.classList.remove('fullscreen-mode');
            showInfo = true;
            updateInfoVisibility();
        }

        // Atualiza a visibilidade das informações
        function updateInfoVisibility() {
            if (showInfo) {
                mediaInfo.style.display = 'block';
                playerStatus.style.display = 'block';
            } else {
                mediaInfo.style.display = 'none';
                playerStatus.style.display = 'none';
            }
        }

        // Mostrar/ocultar informações com a tecla 'i'
        document.addEventListener('keydown', (e) => {
            if (e.key === 'i' || e.key === 'I') {
                showInfo = !showInfo;
                updateInfoVisibility();
            } else if (e.key === 'Escape') {
                exitFullscreen();
            }
        });

        // Mostrar botão de saída quando o mouse se mover
        playerMode.addEventListener('mousemove', () => {
            if (document.body.classList.contains('fullscreen-mode')) {
                exitBtn.style.display = 'block';
                setTimeout(() => {
                    exitBtn.style.display = 'none';
                }, 2000);
            }
        });

        // Botão de saída
        exitBtn.addEventListener('click', () => {
            exitFullscreen();
        });

        // Funções auxiliares
        function generateKey() {
            const chars = 'ABCDEFGHJKLMNPQRSTUVWXYZ23456789';
            let key = '';
            for (let i = 0; i < 8; i++) {
                key += chars.charAt(Math.floor(Math.random() * chars.length));
            }
            return key;
        }

        function updateGenStatus(message, status) {
            const el = document.getElementById('gen-status');
            el.textContent = message;
            el.className = 'connection-status ' + status;
        }

        // ========== MODO PLAYER ==========
        function initPlayerMode(key) {
            updatePlayerStatus('Conectando...', 'offline');
            showInfo = false;
            updateInfoVisibility();
            
            // Monitorar status da conexão
            window.addEventListener('online', () => {
                updatePlayerStatus('✔ Online', 'online');
                if (!unsubscribe) startListening(key);
            });

            window.addEventListener('offline', () => {
                updatePlayerStatus('⚡ Offline', 'offline');
            });

            // Iniciar listener
            startListening(key);
        }

        function startListening(key) {
            unsubscribe = db.collection('tvs')
                .where('activationKey', '==', key)
                .onSnapshot(handleSnapshot, handleError);
        }

        function handleSnapshot(snapshot) {
            if (snapshot.empty) {
                showError('Nenhuma TV encontrada com esta chave');
                return;
            }

            snapshot.docChanges().forEach(change => {
                if (change.type === 'added' || change.type === 'modified') {
                    updateDisplay(change.doc.data());
                }
            });

            updatePlayerStatus('✔ Sincronizado', 'online');
        }

        function handleError(error) {
            console.error("Erro na conexão:", error);
            updatePlayerStatus('Erro de conexão', 'offline');
            
            if (error.code === 'unavailable') {
                setTimeout(() => startListening(currentKey), 5000);
            }
        }

        function updateDisplay(tvData) {
            const display = document.getElementById('media-display');
            
            display.innerHTML = '';
            mediaInfo.textContent = `TV ${tvData.name || 'Sem nome'} • ${new Date().toLocaleTimeString()}`;

            if (!tvData.media) {
                display.innerHTML = '<p>Aguardando conteúdo...</p>';
                return;
            }

            if (tvData.media.type === 'text') {
                const textEl = document.createElement('div');
                textEl.className = 'text-content';
                textEl.style.color = tvData.media.color || '#ffffff';
                textEl.style.backgroundColor = tvData.media.bgColor || 'transparent';
                textEl.style.fontSize = (tvData.media.fontSize || 24) + 'px';
                textEl.textContent = tvData.media.content;
                display.appendChild(textEl);
            } 
            else if (tvData.media.type === 'image') {
                const imgEl = document.createElement('img');
                imgEl.src = tvData.media.url;
                imgEl.style.maxWidth = '100%';
                imgEl.style.maxHeight = '100%';
                imgEl.style.objectFit = 'contain';
                display.appendChild(imgEl);
            }
            else if (tvData.media.type === 'video') {
                const videoEl = document.createElement('video');
                videoEl.src = tvData.media.url;
                videoEl.controls = false;
                videoEl.autoplay = true;
                videoEl.loop = tvData.media.loop || false;
                videoEl.style.maxWidth = '100%';
                videoEl.style.maxHeight = '100%';
                videoEl.style.objectFit = 'contain';
                display.appendChild(videoEl);
            }
        }

        function showError(message) {
            const display = document.getElementById('media-display');
            display.innerHTML = `<p style="color: #ff5555">${message}</p>`;
        }

        function updatePlayerStatus(message, status) {
            const el = document.getElementById('player-status');
            el.textContent = message;
            el.className = 'connection-status ' + status;
        }
    </script>
</body>
</html>